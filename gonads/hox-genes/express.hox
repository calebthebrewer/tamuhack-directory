// vi:syntax=javascript

;(function() {
  'use strict';

  var CEREBELLUM = require('../../brain/cerebellum.js');
  var Project = require('../../brain/cerebrum/project.js');

  var sanitizeHtml = require('sanitize-html');

  var self;
  module.exports = self = {
    engine: 'jade',
    port: 8081,
    routes: {
      '/': function(request, response) {
        Project.find({}, function(error, projects) {
          if (error) {
            CEREBELLUM.log.print('Error: ' + error.message);
            return response.json({
              meta: {
                success: false
              }
            });
          }

          CEREBELLUM.log.print('Projects: ' + JSON.stringify(projects));

          response.render('spine', { projects: projects });
        });
      },
      '/:wildcard': function(request, response, next) {
        if (request.url === '/projects' ||
            request.url === '/project') {
          return next();
        }

        if(request.url !== '/submission') {
          Project.find({}, function(error, projects) {
            if (error) {
              CEREBELLUM.log.print('Error: ' + error.message);
              return response.json({
                meta: {
                  success: false
                }
              });
            }

            CEREBELLUM.log.print('Projects: ' + JSON.stringify(projects));

            response.render('spine', { projects: projects });
          });
        } else {
          response.render('spine', { projects: [] });
        }
      },
      '/projects': function(request, response) {
        Project.find({}, function(error, projects) {
          if (error) {
            CEREBELLUM.log.print('Error: ' + error.message);
            return response.json({
              meta: {
                success: false
              }
            });
          }

          CEREBELLUM.log.print('Projects: ' + JSON.stringify(projects));

          response.json({
            meta: {
              success: true
            },
            data: {
              projects: projects
            }
          });
        });
      },
      '/project': {
        get: function(request, response) {
          Project.findOne(request.body, function(error, project) {
            if (error) {
              CEREBELLUM.log.print('Error: ' + error.message);
              return response.json({
                meta: {
                  success: false
                }
              });
            }

            CEREBELLUM.log.print('Project: ' + JSON.stringify(project));

            response.json({
              meta: {
                success: true
              },
              data: {
                project: project
              }
            });
          });
        },
        post: function(request, response) {
          var form = request.body;

          var newProject = new Project();
          newProject.name = sanitizeHtml(form.name);
          newProject.demoUrl = sanitizeHtml(form.demoUrl);
          newProject.githubUrl = sanitizeHtml(form.githubUrl);
          newProject.description = sanitizeHtml(form.description);
          var members = [];

          for (var i = 1; i < 5; i++) {
            if (form['memberName' + i] !== '') {
              members.push({
                name: form['memberName' + i],
                twitter: form['memberTwitter' + i] !== '' ? sanitizeHtml(form['memberTwitter' + i]) : null,
                siteUrl: form['memberSite' + i] !== '' ? sanitizeHtml(form['memberSite' + i]) : null
              });
            }
          }

          newProject.members = members;
          newProject.save(function(error) {
            if (error) {
              CEREBELLUM.log.print('Error: ' + error.message);

              return response.json({
                meta: {
                  success: false
                }
              });
            }

            return response.json({
              meta: {
                success: false
              },
              data: {
                project: newProject
              }
            });
          });
        }
      }
    },
    passport: null,
    sessions: null,
    configure: function(parameters) {
      var app = parameters.app;
      var express = parameters.express;
      var cookieParser = require('cookie-parser');
      var bodyParser = require('body-parser');
      var session = require('express-session');

      this.sessions = parameters.sessions;

      app.locals.basedir = CEREBELLUM.directories.root;

      app.use('/skin', express.static(CEREBELLUM.directories.skin));
      app.use('/muscle', express.static(CEREBELLUM.directories.muscle));
      app.use('/voice', express.static(CEREBELLUM.directories.voice));

      app.set('views', CEREBELLUM.directories.skeleton);
      app.set('view engine', this.engine);

      app.use(cookieParser());
      app.use(bodyParser.json());
      app.use(bodyParser.urlencoded({ extended: true }));

      app.use(session({
        secret: 'somesecrethere',
        resave: true,
        saveUninitialized: true
      }));

      var emptyMiddleware = function(request, response, next) { next(); };
      var routeKeys = Object.keys(this.routes);
      for (var i = 0; i < routeKeys.length; i ++) {
        var route = routeKeys[i];
        if (typeof this.routes[route] === 'function') {
          app.all(route, this.routes[route]);
        } else {
          var typeKeys = Object.keys(this.routes[route]);
          for (var j = 0; j < typeKeys.length; j ++) {
            var type = typeKeys[j];
            var middleware, execute;
            if (typeof this.routes[route][type] === 'function') {
              middleware = emptyMiddleware;
              execute = this.routes[route][type];
            } else {
              middleware = this.routes[route][type].middleware;
              execute = this.routes[route][type].execute;
            }
            app[type](route, middleware, execute);
          }
        }
      }
    }
  };
})();
